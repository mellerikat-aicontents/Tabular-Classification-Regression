name: tcr
version: 2.0.1

## 외부에서 데이터 가져오기 / 결과 저장하는 경우 해당 위치에 지정
external_path:
    - load_train_data_path: ./solution/sample_data/train
    - load_inference_data_path:  ./solution/sample_data/test
    - save_train_artifacts_path:
    - save_inference_artifacts_path:
    - load_model_path:

external_path_permission:
    - aws_key_profile: 
 
## 실험에 필요한 파라미터를 설정함 
## - 해당 위치에서 삭제되면, code 의 default 로 실행
user_parameters:
    - train_pipeline:
        - step: input 
          args:
            - file_type: csv
              encoding: utf-8
          ui_args: 
        
        - step: readiness
          args:
            - x_columns: [input_x0,input_x1,input_x2,input_x3]
              y_column: target
              task_type: classification
              target_label: _major
              column_types: auto
          ui_args:
            - x_columns
            - y_column

        - step: preprocess
          args:
          ui_args:

        - step: train
          args:
            - evaluation_metric: auto
              shapley_value: False 
              output_type: all
          ui_args:
            - evaluation_metric
            - shapley_value

        - step: output
          args:
          ui_args:

    - inference_pipeline:
        - step: input  
          args:
          ui_args: 
        
        - step: readiness
          args:
          ui_args:

        - step: preprocess
          args:
          ui_args:

        - step: inference
          args:
          ui_args:

        - step: output
          args:
          ui_args:

## asset 의 설치 정보를 기록       
asset_source:
    - train_pipeline:
        - step: input
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/input.git
            # code: local
            branch: v1.0.0_tabular  
            requirements:
              - pandas==1.5.3
              - numpy==1.26.4
              - tqdm==4.66.2

        - step: readiness
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/readiness.git
            # code: local
            branch: v1.0.1_tcr
            requirements:
              - requirements.txt

        - step: preprocess
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/preps.git
            # code: local
            branch: v2.0.1_tcr
            requirements:
              - requirements.txt

        - step: train
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/tcr_ml.git
            # code: local
            branch: v2.0.1
            requirements:
              - requirements.txt 
    
        - step: output
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/output.git
            # code: local
            branch: v1.0.0
            requirements:
              - requirements.txt
   
    - inference_pipeline:
        - step: input
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/input.git
            # code: local
            branch: v1.0.0_tabular  
            requirements:
              - pandas==1.5.3
              - numpy==1.26.4
              - tqdm==4.66.2

        - step: readiness
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/readiness.git
            # code: local
            branch: v1.0.1_tcr
            requirements:
              - requirements.txt

        - step: preprocess
          source:  ## git / local 지원
            code: http://mod.lge.com/hub/dxadvtech/assets/preps.git
            # code: local
            branch: v2.0.1_tcr
            requirements:
              - requirements.txt

        - step: inference
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/tcr_ml.git
            # code: local
            branch: v2.0.1
            requirements:
              - requirements.txt 
    
        - step: output
          source:
            code: http://mod.lge.com/hub/dxadvtech/assets/output.git
            # code: local
            branch: v1.0.0
            requirements:
              - requirements.txt
           
     
control:
    ## 1. 패키지 설치 및 asset 존재 여부를 실험 시마다 체크할지, 한번만 할지 결정
    ## 1-2 requirements.txt 및 종속 패키지들 한번만 설치할 지 매번 설치할지도 결정 
    - get_asset_source: once ## once, every
    ## 2. 생성된 artifacts 를 backup 할지를 결정 True/False
    - backup_artifacts: True
    ## 3. pipeline 로그를 backup 할지를 결정 True/False
    - backup_log: True
    ## 4. 저장 공간 사이즈를 결정 (단위 MB)
    - backup_size: 1000
    ## 5. Asset 사이 데이터 전달 방법으로 memory, file 를 지원
    - interface_mode: file

########
ui_args_detail:
    - train_pipeline:
        - step: readiness 
          args:
              - name: x_columns
                description: Dataframe에 있는 학습 대상 x 컬럼 명을 ','로 구분하여 입력합니다.
                type: string
                default: ''
                range:
                  - 1
                  - 1000000
              - name: y_column
                description: Dataframe에 있는 y 컬럼 명을 입력합니다.
                type: string
                default: ''
                range:
                  - 1
                  - 1000000
        - step: train 
          args:
              - name: evaluation_metric
                description: HPO시 모델을 선택하기 위한 평가 metric을 선택합니다.
                type: single_selection
                default: auto
                selectable:
                  - auto
                  - accuracy
                  - f1
                  - recall
                  - precision
                  - mse
                  - r2
                  - mae
                  - rmse    
              - name: shapley_value
                description: shapley value를 계산하여 output.csv에 출력할지 결정합니다.
                type: single_selection
                default: False
                selectable:
                  - False
                  - True
    - inference_pipeline: